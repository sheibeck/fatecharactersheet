<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">    
    	
	<link rel="shortcut icon" type="image/png" href="favicon.png"/>
	
	<!-- css libraries -->
	<link rel="stylesheet" 
		    href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" 
			integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" 
            crossorigin="anonymous">
		  
	<style>
        @font-face {
            font-family: 'fate_core_glyphsregular';
            src: url('fate_core_font-webfont.woff2') format('woff2'),
                 url('fate_core_font-webfont.woff') format('woff');
            font-weight: normal;
            font-style: normal;

        }
		.navbar-brand img {
			max-height: 50px;
		}

		.card-columns {
		  @include media-breakpoint-only(lg) {
			column-count: 4;
		  }
		  @include media-breakpoint-only(xl) {
			column-count: 5;
		  }
		}
		
		input::-webkit-input-placeholder {
			color: #C0C0C0 !important;
		}
		input::-moz-placeholder {
			color: #C0C0C0 !important;
		}
		input:-moz-placeholder { /* Older versions of Firefox */
			color: #C0C0C0 !important;
		}
		input:-ms-input-placeholder {
			color: #C0C0C0 !important;
		}
		
		textarea::-webkit-input-placeholder {
			color: #C0C0C0 !important;
		}
		textarea::-moz-placeholder {
			color: #C0C0C0 !important;
		}
		textarea:-moz-placeholder { /* Older versions of Firefox */
			color: #C0C0C0 !important;
		}
		textarea:-ms-input-placeholder {
			color: #C0C0C0 !important;
		}

        .roll-modifier {
            background-color:lightgray;
        }

        .dice {
            font-family: 'fate_core_glyphsregular';
        }

        .hidden {
            display: none !important; /* override flex stuff */
        }

        .current-roll {
            background-color: yellow;;
        }

        #gameTable #canvas {
            min-height: 768px;
        }

        /* game room */
        video {
            width: 100%;
        }

        /* print styles */
        @media print {
          button {
            display: none;
          }

          hr {
              display: none;
          }          
			   
		  input::-webkit-input-placeholder {
			color: transparent !important;
		  }
		  input::-moz-placeholder {
			color: transparent !important;
		  }
		  input:-moz-placeholder { /* Older versions of Firefox */
			color: transparent !important;
		  }
		  input:-ms-input-placeholder {
			color: transparent !important;
		  }
		  input:-ms-input-placeholder {
			color: transparent !important;
		  }
		  
		  textarea::-webkit-input-placeholder {
			color: transparent !important;
		  }
		  textarea::-moz-placeholder {
			color: transparent !important;
		  }
		  textarea:-moz-placeholder { /* Older versions of Firefox */
			color: transparent !important;
		  }
		  textarea:-ms-input-placeholder {
			color: transparent !important;
		  }
		  textarea:-ms-input-placeholder {
			color: transparent !important;
		  }
		}
	</style>

	<title>Fate Character Sheet</title>	
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <a class="navbar-brand" href="#"><img src='powered-by-fate.png' /></a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" target="_blank" href="https://fate-srd.com/"><span class="dice">O</span> Fate SRD</a>
                </li>
                <li class="nav-item">
                    <a id="roll-fate" class="nav-link" target="#" href="#" data-toggle='modal' data-target='#modalDiceRoller'><span class="dice">+</span> Roll Dice</a>
                </li>
                <li class="nav-item">
                    <a id="play-fate" class="nav-link" target="#" href="#" data-toggle='modal' data-target='#modalGameTable'><span class="dice">A</span> Play Fate</a>
                </li>
                <li class="nav-item">
                    <a id='list-sheets' class="nav-link" href="#"><span class="dice">C</span>Character Sheets</a>
                </li>
                <li class="hidden nav-item requires-auth">
                    <a id='my-characters' class="nav-link" href="#"><span class="dice">D</span>My Characters</a>
                </li>
            </ul>

            <div class="form-inline login-button requires-noauth hidden">
                <button type="button" class="btn btn-primary mr-sm-1 mb-sm-1 mb-md-0" onclick="fatesheet.authenticateFacebook()">
                    Login with <i class="fab fa-facebook"></i>
                </button>
            </div>
            <div class="form-inline logout-button mx-1 mb-sm-1 requires-auth hidden">
                <button type="button" class="btn btn-primary mr-sm-1 mb-sm-1 mb-md-0" onclick="fatesheet.logout()">Logout</button>
            </div>
            <div class="form-inline my-2 my-lg-0">
                <input id="search-text" class="form-control mr-sm-2" type="text" placeholder="Search">
                <button id="search-button" class="btn btn-outline-success my-2 my-sm-0" type="button">Search</button>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-2">
        <div id="results">
        </div>

        <div class="row hidden" id="gameTable">
            <div class="col-sm-12 col-md-9" id="canvas">

            </div>
            <div class="col-sm-12 col-md-3">
                <div id="localVideo" class="col-12">

                </div>

                <div id="remoteVideo" class="col-12">

                </div>
            </div>

            <div class="col-12 mt-2">
                <div class="form-group row">
                    <div class="col-sm-12 col-md-2">
                        <button class="btn btn-warning" onclick="fatesheet.leaveGameTable()"><i class='fa fa-power-off'></i>Leave Table</button>
                    </div>
                    <div class="col-sm-12 col-md-2">
                        <button onclick="fatesheet.config.gameTable.canvas.sync()" class="btn btn-warning"><i class='fa fa-power-off'></i>Sync Table</button>
                    </div>
                    <div class="col-6">
                        <input type="text" class="form-control" id="gameTableUrl" placeholder="Table Name">
                        <small id="gameTableHelp" class="form-text text-muted">Send this to your friends so they can join you at the table.</small>
                    </div>
                    <div class="col-1">
                        <!-- Trigger -->
                        <button class="btn" id="copyGameUrl" data-clipboard-target="#gameTableUrl">
                            <i class="fa fa-copy"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>


        <!-- delete confirmation modal-->
        <div class="modal fade" id="modalDeleteConfirm" tabindex="-1" role="dialog" aria-labelledby="deleteLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteLabel">Confirm Character Delete</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this character?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger js-delete">Delete <i class='fa fa-trash'></i></button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- dice tray -->
        <div class="modal fade" id="modalDiceRoller" tabindex="-1" role="dialog" aria-labelledby="diceRollerLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="diceRollerLabel"> <span class="dice">+</span> Fate Dice Roller <span class="dice">-</span></h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="row px-0 mx-0 pt-1 pb-1 roll-modifier">
                        <label class="col-4 h5 pt-2">Roll Modifier</label> <input class="form-control col-2 text-center" type="number" id="rollModifier">
                    </div>
                    <div class="modal-body">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="fatesheet.diceRoller()">Roll</button>
                        <button type="button" class="btn btn-warning" onclick="fatesheet.clearDiceTray()">Clear</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- game table  -->
        <div class="modal fade" id="modalGameTable" tabindex="-1" role="dialog" aria-labelledby="gameTableLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="gameTableLabel"> <span class="dice">+</span> Play Fate <span class="dice">-</span></h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group row">
                            <div class="col-sm-8">
                                <input type="text" class="form-control" id="gameRoomName" aria-describedby="gameTableHelp" placeholder="Table Name">
                                <small id="gameTableHelp" class="form-text text-muted">Create a private game room for you and your friends</small>
                            </div>
                            <div class="col-sm-4">
                                <button id="createNewTable" class="btn btn-primary">New Table</button>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="fatesheet.initGameTable()">Play!</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 3rd party stuff -->
    <div id="fb-root"></div>

    <!-- js libraries -->
    <script src="https://sdk.amazonaws.com/js/aws-sdk-2.190.0.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"
            integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
            crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
            integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
            crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
            integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
            crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/notify/0.4.2/notify.min.js"
            integrity="sha256-tSRROoGfGWTveRpDHFiWVz+UXt+xKNe90wwGn25lpw8="
            crossorigin="anonymous"></script>

    <script defer src="https://use.fontawesome.com/releases/v5.0.6/js/all.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-serialize-object/2.5.0/jquery.serialize-object.min.js"></script>
    <script src="https://cdn.rawgit.com/GreenImp/rpg-dice-roller/aba8ad5f/dice-roller.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/1.7.1/clipboard.min.js"></script>

    <!-- shared canvas -->
    <script src="https://simplewebrtc.com/latest-v2.js"></script>
    <script src="https://cdn.webrtc-experiment.com/Canvas-Designer/canvas-designer-widget.js"></script>

    <script type="text/javascript">
        $.expr[":"].contains = $.expr.createPseudo(function (arg) {
            return function (elem) {
                return $(elem).text().toUpperCase().indexOf(arg.toUpperCase()) >= 0;
            };
        });

        /* populate function ala Dave Stewart - http://davestewart.io/plugins/jquery/jquery-populate/ */
        jQuery.fn.populate = function (g, h) { function parseJSON(a, b) { b = b || ''; if (a == undefined) { } else if (a.constructor == Object) { for (var c in a) { var d = b + (b == '' ? c : '[' + c + ']'); parseJSON(a[c], d) } } else if (a.constructor == Array) { for (var i = 0; i < a.length; i++) { var e = h.useIndices ? i : ''; e = h.phpNaming ? '[' + e + ']' : e; var d = b + e; parseJSON(a[i], d) } } else { if (k[b] == undefined) { k[b] = a } else if (k[b].constructor != Array) { k[b] = [k[b], a] } else { k[b].push(a) } } }; function debug(a) { if (window.console && console.log) { console.log(a) } } function getElementName(a) { if (!h.phpNaming) { a = a.replace(/\[\]$/, '') } return a } function populateElement(a, b, c) { var d = h.identifier == 'id' ? '#' + b : '[' + h.identifier + '="' + b + '"]'; var e = jQuery(d, a); c = c.toString(); c = c == 'null' ? '' : c; e.html(c) } function populateFormElement(a, b, c) { var b = getElementName(b); var d = a[b]; if (d == undefined) { d = jQuery('#' + b, a); if (d) { d.html(c); return true } if (h.debug) { debug('No such element as ' + b) } return false } if (h.debug) { _populate.elements.push(d) } elements = d.type == undefined && d.length ? d : [d]; for (var e = 0; e < elements.length; e++) { var d = elements[e]; if (!d || typeof d == 'undefined' || typeof d == 'function') { continue } switch (d.type || d.tagName) { case 'radio': d.checked = (d.value != '' && c.toString() == d.value); case 'checkbox': var f = c.constructor == Array ? c : [c]; for (var j = 0; j < f.length; j++) { d.checked |= d.value == f[j] } break; case 'select-multiple': var f = c.constructor == Array ? c : [c]; for (var i = 0; i < d.options.length; i++) { for (var j = 0; j < f.length; j++) { d.options[i].selected |= d.options[i].value == f[j] } } break; case 'select': case 'select-one': d.value = c.toString() || c; break; case 'text': case 'button': case 'textarea': case 'submit': default: c = c == null ? '' : c; d.value = c } } } if (g === undefined) { return this }; var h = jQuery.extend({ phpNaming: true, phpIndices: false, resetForm: true, identifier: 'id', debug: false }, h); if (h.phpIndices) { h.phpNaming = true } var k = []; parseJSON(g); if (h.debug) { _populate = { arr: k, obj: g, elements: [] } } this.each(function () { var a = this.tagName.toLowerCase(); var b = a == 'form' ? populateFormElement : populateElement; if (a == 'form' && h.resetForm) { this.reset() } for (var i in k) { b(this, i, k[i]) } }); return this };

        String.prototype.replaceAll = function (search, replacement) {
            var target = this;
            return target.replace(new RegExp(search, 'g'), replacement);
        };

        (function (fatesheet, $, undefined) {

            fatesheet.config = {
                isDevelop: false,
                isAuthenticated: false,
                appId: '189783225112476',
                roleArn: 'arn:aws:iam::210120940769:role/FateCharacterSheetUser',
                awsBucket: new AWS.S3({
                    params: {
                        Bucket: 'fatecharactersheet.com'
                    }
                }),
                fbUserId: null,
                characterId: null,
                diceRoller: new DiceRoller(),
                gameTable: {
                    canvas: null,
                    webrtc: null,
                    roomname: null,
                }
            }

            fatesheet.templates = {

                characterList: "<div class='card'>" +
                                    "	  <div class='card-body'>" +
                                    "		<h5 class='card-title'>{{name}}</h5>" +
                                    "		<p class='card-text'>{{highconcept}}</p>" +
									"		<p class='card-note font-italic small'>({{description}})</p>" +
                                    "		<a href='#' class='btn btn-primary js-play' data-id='{{id}}'>Play</a>" +
                                    "		<a href='#' class='btn btn-danger' data-id='{{id}}' data-toggle='modal' data-target='#modalDeleteConfirm'>Delete</a>" +
                                    "	  </div>" +
                                    "     <div class='card-footer text-muted'>" +
                                    "           <span class='badge badge-pill badge-secondary'>{{sheetname}}</span>" +
                                    "     </div>" +
                                   "</div>",
                sheetList: "<div class='card'>" +
								   "	<div class='card-body'>" +
                                   "		<h5 class='card-title'>{{sheetname}}</h5>" +
								   "		<a href='#' class='btn btn-primary js-sheet-preview' data-id='{{id}}'>Create Character <i class='fa fa-user'></i></a>" +
                                   "	</div>" +
                                   "     <div class='card-footer text-muted'>" +
                                    "           <span class='badge badge-pill badge-secondary'>{{system}}</span>" +
                                    "     </div>" +
                                   "</div>",
            }

            fatesheet.navigation = {
                character: {
                    auth: "<hr/><div class='row'><div class='col'>" +
                                "   <button type='button' class='btn btn-success js-save-character d-print-none'>Save Character <i class='fa fa-save'></i></button>" +
                                "   <button type='button' class='btn btn-default d-print-none' onclick='window.print();'>Print Character <i class='fa fa-print'></i></button>" +
                                "</div></div>",
                    noauth: "<hr/><div class='row'><div class='col'>" +
                                "    <button type='button' class='btn btn-default d-print-none' onclick='window.print();'>Print Character <i class='fa fa-print'></i></button>" +
                                "</div></div>",

                },
                sheet: {
                    auth: "<hr/><div class='row'><div class='col'>" +
                           "    <button type='button' class='btn btn-success js-create-character d-print-none'>Save Character <i class='fa fa-user'></i></button>" +
                           "    <button type='button' class='btn btn-default d-print-none' onclick='window.print();'>Print Character <i class='fa fa-print'></i></button>" +
                           "</div></div>",
                    noauth: "<hr/><div class='row'><div class='col'>" +
                            "    <button type='button' class='btn btn-default d-print-none' onclick='window.print();'>Print Character <i class='fa fa-print'></i></button>" +
                            "</div></div>",
                }

            }


            var results = $('#results');

            function getSheetListInfo(key) {
                /// get character sheet meta data information
                fatesheet.config.awsBucket.headObject({
                    Key: key
                }, function (err, data) {
                    if (err) {
                        console.log(err, err.stack); // an error occurred
                        $.notify(err.message || err, 'error');
                    } else {
                        console.log(data);           // successful response
                        var elem = fatesheet.templates.sheetList
                                        .replaceAll('{{sheetname}}', data.Metadata.sheetname)
                                        .replaceAll('{{system}}', data.Metadata.system)
                                        .replaceAll('{{id}}', key);

                        $('.card-columns', results).append(elem);
                    }
                });
            }

            fatesheet.listSheets = function () {

                location.hash = 'sheetlist';

                /// show a list of available character sheets
                results.empty();

                var prefix = 'sheets';
                fatesheet.config.awsBucket.listObjects({
                    Prefix: prefix
                }, function (err, data) {
                    if (err) {
                        results.innerHTML = 'ERROR: ' + err.message;
                        //document.location.href = 'error.htm';
                    } else {
                        var objKeys = "";

                        var rowContainer = results.append("<div class='card-columns'></div>");

                        data.Contents.forEach(function (obj) {
                            //look for top level child folders under sheets/
                            var isSheetFolder = (obj.Key.toString().substring(0, obj.Key.lastIndexOf("/"))).split('/').length == 2
                                                    && obj.Key.lastIndexOf("/") + 1 == obj.Key.length
                            if (isSheetFolder) {
                                getSheetListInfo(obj.Key);
                            }
                        });
                    }
                });
            }

            fatesheet.getCharacterIdFromKey = function (key) {
                return key.replace(/^.*[\\\/]/, '').replace('.character', '');
            }

            fatesheet.getCharacterInfo = function (key) {
                /// Load character info into a sheet
                fatesheet.config.characterId = fatesheet.getCharacterIdFromKey(key);

                fatesheet.config.awsBucket.getObject({
                    Key: key
                }, function (err, data) {
                    if (err) {
                        console.log(err, err.stack); // an error occurred
                        $.notify(err.message || err, 'error');
                    } else {
                        console.log(data);           // successful response

                        var character = JSON.parse(data.Body.toString());

                        $('form').populate(character);

                        //check if there is an autocalc function and runit
                        if (typeof autocalc !== "undefined") {
                            autocalc();
                        }
                    }
                });

            }

            fatesheet.getCharacterListInfo = function (key) {
                /// populate the character list screen
                fatesheet.config.awsBucket.headObject({
                    Key: key
                }, function (err, data) {
                    if (err) {
                        console.log(err, err.stack); // an error occurred
                        $.notify(err.message || err, 'error');
                    } else {
                        console.log(data);           // successful response

                        var elem = fatesheet.templates.characterList
                                            .replaceAll('{{name}}', (data.Metadata.name || ''))
                                            .replaceAll('{{highconcept}}', (data.Metadata.highconcept || ''))
											.replaceAll('{{description}}', (data.Metadata.description || ''))
                                            .replaceAll('{{sheetname}}', (data.Metadata.sheetname || ''))
                                            .replaceAll('{{system}}', (data.Metadata.system || ''))
                                            .replaceAll('{{id}}', key)

                        $('.card-columns', results).append(elem);
                    }
                });

            }

            fatesheet.listCharacters = function () {
                location.hash = 'characterlist';

                /// show a list of the users characters
                results.empty();

                var prefix = 'facebook-' + fatesheet.config.fbUserId;
                fatesheet.config.awsBucket.listObjects({
                    Prefix: prefix
                }, function (err, data) {
                    if (err) {
                        results.innerHTML = 'ERROR: ' + err;
                    } else {
                        if (data.Contents.length === 0 && !location.hash) {
                            fatesheet.listSheets();
                        }
                        else {
                            var objKeys = "";

                            var rowContainer = results.append("<div class='card-columns'></div>");
                            data.Contents.forEach(function (obj) {
                                fatesheet.getCharacterListInfo(obj.Key);
                            });
                        };
                    }
                });
            }

            function generateUUID() { // Public Domain/MIT
                var d = new Date().getTime();
                if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
                    d += performance.now(); //use high-precision timer if available
                }
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = (d + Math.random() * 16) % 16 | 0;
                    d = Math.floor(d / 16);
                    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
                });
            }

            function generateShortUID() {
                // I generate the UID from two parts here
                // to ensure the random number provide enough bits.
                var firstPart = (Math.random() * 46656) | 0;
                var secondPart = (Math.random() * 46656) | 0;
                firstPart = ("000" + firstPart.toString(36)).slice(-3);
                secondPart = ("000" + secondPart.toString(36)).slice(-3);
                return firstPart + secondPart;
            }

            function addNav(navBar) {
                /// add nav bars to a character sheet so we know what actions are available
                $('.sheet', results).append(fatesheet.config.isAuthenticated ? navBar.auth : navBar.noauth);
                $('.sheet', results).wrap('<form></form>')
            }

            function formatKeyAsHash(key) {
                var aKey = key.replace(/\/$/, "").split('/');
                //return the last item in the key as the hashtag
                location.hash = aKey[0] + '&name=' + aKey[1];
            }

            function getKeyFromHashTag() {
                var lochash = location.hash.substr(1);
                var myfolder = lochash.split('&')[0];
                var mylocation = lochash.substr(lochash.indexOf('name='))
                                  .split('&')[0]
                                  .split('=')[1];
                if (mylocation) {
                    switch (myfolder) {
                        case 'sheets':
                            fatesheet.showSheet(myfolder + '/' + mylocation + '/', null);
                            break;

                        case 'gametable':
                            configGameTable(mylocation);
                            fatesheet.initGameTable();
                            break;
                    }
                }
            }

            fatesheet.getTableName = function (roomName) {
                if (!roomName) {
                    roomName = fatesheet.readCookie('fatecharactersheet_table_name') || generateShortUID();
                }

                fatesheet.createCookie('fatecharactersheet_table_name', roomName, 365);

                return roomName;
            }

            // Create cookie
            fatesheet.createCookie = function (name, value, days) {
                var expires;
                if (days) {
                    var date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                    expires = "; expires=" + date.toGMTString();
                }
                else {
                    expires = "";
                }
                document.cookie = name + "=" + value + expires + "; path=/";
            }

            // Read cookie
            fatesheet.readCookie = function (name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) === ' ') {
                        c = c.substring(1, c.length);
                    }
                    if (c.indexOf(nameEQ) === 0) {
                        return c.substring(nameEQ.length, c.length);
                    }
                }
                return null;
            }

            fatesheet.showSheet = function (key, character) {
                if (character) {
                    location.hash = 'character';
                }
                else {
                    formatKeyAsHash(key);
                }

                /// if character is null then we will show a blank sheet
                /// if character is not null then we will load a character into the sheet
                results.empty();

                fatesheet.config.awsBucket.getObject({ Key: key + 'sheet.html' }, function (err, data) {
                    if (!err) {
                        var sheetHtml = data.Body.toString();
                        results.html(sheetHtml);

                        // add navigation
                        if (character != null) {
                            addNav(fatesheet.navigation.character);
                            fatesheet.getCharacterInfo(character);
                        }
                        else {
                            addNav(fatesheet.navigation.sheet);
                        }
                    }
                });
            }

            fatesheet.loadCharacter = function (key) {
                /// load a character and then show the sheet by the id stored in the character
                fatesheet.config.awsBucket.getObject({ Key: key }, function (err, data) {

                    if (!err) {
                        var character = JSON.parse(data.Body.toString());
                        var sheet = 'sheets/' + character.sheetname + '/';
                        fatesheet.showSheet(sheet, key);

                        var params = {};
                        params[FB.AppEvents.ParameterNames.CONTENT_TYPE] = 'Character'; //sheetname
                        params[FB.AppEvents.ParameterNames.CONTENT_ID] = key // character key
                        FB.AppEvents.logEvent(
						  FB.AppEvents.EventNames.VIEWED_CONTENT,
						  null,  // numeric value for this event - in this case, none
						  params
						);
                    }
                });
            }

            fatesheet.saveCharacter = function (isNew) {
                if (fatesheet.config.isAuthenticated) {

                    /// save a character
                    var data = $('form').serializeJSON();
                    var dataObj = JSON.parse(data);

                    //set characterid
                    if (isNew) {
                        fatesheet.config.characterId = null;
                        FB.AppEvents.logEvent('createdACharacter' + dataObj.sheetname);
                    }
                    fatesheet.config.characterId = fatesheet.config.characterId == null ? generateUUID() : fatesheet.config.characterId;

                    var key = 'facebook-' + fatesheet.config.fbUserId + '/' + fatesheet.config.characterId + '.character';
                    var metadata = {
                        name: dataObj.name,
                        highconcept: dataObj.aspect.highconcept || 'Uknown',
                        description: (dataObj.description || '').replace(/[\n\r]/g, ' '),
                        sheetname: dataObj.sheetname,
                        system: dataObj.system
                    }

                    fatesheet.config.awsBucket.putObject({
                        Key: key,
                        Body: data,
                        Metadata: metadata,
                    }, function (err, data) {
                        if (!err) {
                            console.log('character saved.');
                            $.notify('Character Saved.', 'success');
                        }
                        else {
                            console.log(err);
                            $.notify(err.message || err, 'error');
                        }
                    });
                }
                else {
                    window.print();
                }
            }

            fatesheet.deleteCharacter = function (key) {
                /// delete a character
                fatesheet.config.awsBucket.deleteObject({
                    Key: key
                }, function (err, data) {
                    $('#modalDeleteConfirm').modal('hide');

                    if (err) console.log(err, err.stack); // an error occurred
                    else {
                        console.log(data);           // successful response
                        fatesheet.listCharacters();
                    }
                });
            }

            fatesheet.diceRoller = function () {

                $('.current-roll').removeClass('current-roll');

                var $diceTray = $('.modal-body', '#modalDiceRoller');
                var modifier = $('#rollModifier').val();
                // affixe a + on front of the modifier if it's missing
                modifier = (modifier !== '' && modifier.indexOf('-') === -1) ? "+" + modifier : modifier;

                fatesheet.config.diceRoller.roll('4dF.2' + modifier);

                // get the latest dice rolls from the log
                var latestRoll = fatesheet.config.diceRoller.getLog().shift();
                var displayDice = '';

                $.each(latestRoll.rolls[0], function (key, value) {
                    switch (value) {
                        case -1:
                            displayDice += '<span class="dice">-</span>';
                            break;
                        case 1:
                            displayDice += '<span class="dice">+</span>';
                            break;
                        default:
                            displayDice += '<span class="dice">0</span>';
                            break;
                    }
                });

                var rollElem = "<p class='dice-roll current-roll'>" + displayDice + (modifier !== '' ? ' (' + modifier + ')' : '') + " = " + latestRoll.getTotal() + "</p>";
                $diceTray.prepend(rollElem);
            }

            fatesheet.clearDiceTray = function () {
                fatesheet.config.diceRoller.clearLog();
                var $diceTray = $('.modal-body', '#modalDiceRoller');
                $diceTray.empty();
            }

            function configAWS() {
                AWS.config.region = 'us-east-1';
            }

            function domEvents() {
                $(document).on('click', '.js-delete', function (e) {
                    e.preventDefault();

                    var key = $(this).data('id');
                    fatesheet.deleteCharacter(key);
                });

                $(document).on('click', '.js-play', function (e) {
                    e.preventDefault();

                    var key = $(this).data('id');
                    fatesheet.loadCharacter(key);
                });

                $(document).on('click', '.js-sheet-preview', function (e) {
                    e.preventDefault();

                    var key = $(this).data('id');
                    fatesheet.showSheet(key);
                });

                $('#list-sheets').on('click', function (e) {
                    e.preventDefault();
                    fatesheet.listSheets();
                });

                $('#my-characters').on('click', function (e) {
                    e.preventDefault();
                    fatesheet.listCharacters();
                });

                $(document).on('click', '.js-create-character', function (e) {
                    e.preventDefault();
                    fatesheet.saveCharacter(true);
                });

                $(document).on('click', '.js-save-character', function (e) {
                    e.preventDefault();
                    fatesheet.saveCharacter(false);
                });

                $(document).on('click', '.play-fate', function (e) {
                    e.preventDefault();
                    fatesheet.initGameTable();
                });

                $(document).on('click', '#createNewTable', function (e) {
                    e.preventDefault();
                    configGameTable(generateShortUID());
                });

                $("#search-text").keyup(function (event) {
                    if (event.keyCode === 13) {
                        $("#search-button").click();
                    }
                });

                $('#modalDeleteConfirm').on('show.bs.modal', function (event) {
                    var button = $(event.relatedTarget) // Button that triggered the modal
                    var characterId = button.data('id') // Extract info from data-* attributes
                    // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
                    // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
                    var modal = $(this);
                    $(modal.find('.js-delete')).data('id', characterId);
                })

                $('#search-button').click(function () {
                    $('.card').hide();
                    var filter = $('#search-text').val(); // get the value of the input, which we filter on

                    // filter by character name and description
                    $(".card-title:contains('" + filter + "'), .card-note:contains('" + filter + "'), .card-text:contains('" + filter + "')")
                        .parent().parent().show();


                    // filter by footer content
                    $(".card-footer:contains('" + filter + "')")
                        .parent().show();
                });
            }

            /*!
                * Login to your application using Facebook.
                * Uses the Facebook SDK for JavaScript available here:
                * https://developers.facebook.com/docs/javascript/quickstart/
                */
            function authenticate() {
                //see if we're already logged into facebook
                try {
                    FB.getLoginStatus(function (response) {
                        console.log(response);
                        if (response.status === 'connected') {
                            fatesheet.setupAuthorizedUser(response);
                        } else {
                            fatesheet.setupUnAuthorizedUser();
                        }
                    }, true);
                }
                catch (ex) {
                    if (ex.message === 'FB is not defined') {
                        fatesheet.setupUnAuthorizedUser();
                    }
                    else {
                        console.log(ex.message, ex);
                        $.notify(ex.message, 'error');
                    }
                }
            }

            fatesheet.setupUnAuthorizedUser = function () {
                fatesheet.config.isAuthenticated = false;

                // supply anonymous access credentials
                fatesheet.config.awsBucket.config.credentials = new AWS.Credentials('AKIAIHABKVJBZUFCVWLA', 'WA/7JhLy6SOS9G/XuG4DBu7zCvxRdLZhkY3ag2C5');

                var sts = new AWS.STS();
                sts.config.credentials = new AWS.Credentials('AKIAIHABKVJBZUFCVWLA', 'WA/7JhLy6SOS9G/XuG4DBu7zCvxRdLZhkY3ag2C5');
                sts.getSessionToken(function (err, data) {
                    if (err) console.log("Error getting credentials");
                    else {
                        fatesheet.config.awsBucket.config.credentials = sts.credentialsFrom(data, fatesheet.config.awsBucket.config.credentials);
                        if (!location.hash) {
                            fatesheet.listSheets();
                        }
                    }
                });

                $('.requires-auth').addClass('hidden');
                $('.requires-noauth').removeClass('hidden');
            }

            fatesheet.setupAuthorizedUser = function (response) {
                fatesheet.config.isAuthenticated = true;

                fatesheet.config.awsBucket.config.credentials = new AWS.WebIdentityCredentials({
                    ProviderId: 'graph.facebook.com',
                    RoleArn: fatesheet.config.roleArn,
                    WebIdentityToken: response.authResponse.accessToken
                });
                fatesheet.config.fbUserId = response.authResponse.userID;
                $('.requires-auth').removeClass('hidden');
                $('.requires-noauth').addClass('hidden');

                // list objects
                fatesheet.listCharacters();
            }

            fatesheet.logout = function () {
                FB.logout(function (response) {
                    fatesheet.setupUnAuthorizedUser();
                    fatesheet.listSheets();
                });
            };

            fatesheet.authenticateFacebook = function () {
                FB.login(function (response) {
                    fatesheet.setupAuthorizedUser(response);
                })
            }

            function navigateToUrl() {
                //if we specified a hashtag then navigate to it
                getKeyFromHashTag();
            }

            function setupForDevelopment() {
                fatesheet.config.isDevelop = true;
                fatesheet.config.awsBucket = new AWS.S3({
                    params: {
                        Bucket: 'fatecharactersheet'
                    }
                });
                $('body').prepend('<h1>DEVELOPMENT</h1>');
            }

            function configGameTable(roomName) {
                fatesheet.config.gameTable.roomname = fatesheet.getTableName(roomName);
                $('#gameRoomName').val(fatesheet.config.gameTable.roomname);
            };

            fatesheet.initGameTable = function () {
                
                if (!fatesheet.config.gameTable.canvas || !fatesheet.config.gameTable.canvas.iframe) {
                    fatesheet.config.gameTable.canvas = new CanvasDesigner();
                    // both links are mandatory
                    // widget.html will internally use widget.js
                    fatesheet.config.gameTable.widgetHtmlURL = 'widget.html'; // you can place this file anywhere
                    fatesheet.config.gameTable.widgetJsURL = 'widget.min.js';     // you can place this file anywhere


                    fatesheet.config.gameTable.webrtc = new SimpleWebRTC({
                        // the id/element dom element that will hold "our" video
                        localVideoEl: 'localVideo',
                        // the id/element dom element that will hold remote videos
                        remoteVideosEl: '',
                        // immediately ask for camera access
                        autoRequestMedia: true
                    });

                    // a peer video has been added
                    fatesheet.config.gameTable.webrtc.on('videoAdded', function (video, peer) {
                        console.log('video added', peer);
                        var remotes = document.getElementById('remoteVideo');
                        if (remotes) {
                            var container = document.createElement('div');
                            container.className = 'videoContainer';
                            container.id = 'container_' + fatesheet.config.gameTable.webrtc.getDomId(peer);
                            container.appendChild(video);

                            // suppress contextmenu
                            video.oncontextmenu = function () { return false; };

                            remotes.appendChild(container);
                        }
                    });

                    // a peer video was removed
                    fatesheet.config.gameTable.webrtc.on('videoRemoved', function (video, peer) {
                        console.log('video removed ', peer);
                        var remotes = document.getElementById('remoteVideo');
                        var el = document.getElementById(peer ? 'container_' + fatesheet.config.gameTable.webrtc.getDomId(peer) : 'localScreenContainer');
                        if (remotes && el) {
                            remotes.removeChild(el);
                        }
                    });

                    fatesheet.config.gameTable.webrtc.connection.on('message', function (event) {
                        if (event.payload && event.payload.message) {
                            fatesheet.config.gameTable.canvas.syncData(event.payload.message);
                        }
                    });

                    fatesheet.config.gameTable.canvas.addSyncListener(function (data) {
                        fatesheet.config.gameTable.webrtc.sendToAll('gametable', { message: data });
                    });

                    // show the canvase
                    fatesheet.config.gameTable.canvas.appendTo(document.getElementById('canvas'));

                    // we have to wait until it's ready
                    fatesheet.config.gameTable.webrtc.on('readyToCall', function () {
                        // you can name it anything
                        fatesheet.config.gameTable.webrtc.joinRoom(fatesheet.config.gameTable.roomname);
                    });

                    // we have to wait until it's ready
                    fatesheet.config.gameTable.webrtc.on('connectionReady', function () {
                        // initialize canvas sync
                        setTimeout(fatesheet.config.gameTable.canvas.sync, 1000);
                    });
                               
                    //populate share link
                    $('#gameTableUrl').val(getTableUrl());
                }

                //show table
                $('#gameTable').removeClass('hidden');

                // init the url copier
                new Clipboard('#copyGameUrl');

                // hide the game modal
                $('#modalGameTable').modal('hide');
            }

            fatesheet.leaveGameTable = function() {
                fatesheet.config.gameTable.canvas.destroy();

                fatesheet.config.gameTable.webrtc.stopLocalVideo();
                fatesheet.config.gameTable.webrtc.leaveRoom();
                fatesheet.config.gameTable.webrtc.disconnect();

                fatesheet.config.gameTable.webrtc = null;
                
                // remove all the video elements
                $('video').remove();

                //show table
                $('#gameTable').addClass('hidden');
            }

            function getTableUrl() {
                var url = location.protocol + '//' + location.host + location.pathname + '#gametable&name=' + fatesheet.getTableName();
                return url;
            }

            fatesheet.init = function () {
                if (window.location.href.indexOf('localhost') !== -1) {
                    setupForDevelopment();
                }

                //auth facebook
                $.ajaxSetup({ cache: true });
                $.getScript('https://connect.facebook.net/en_US/sdk.js', function () {
                    FB.init({
                        appId: fatesheet.config.appId,
                        autoLogAppEvents: true,
                        status: true,
                        cookie: true,
                        xfbml: true,
                        oauth: true,
                        version: 'v2.12'
                    });

                    FB.AppEvents.logPageView();
                });

                // initialize the application
                domEvents();
                configAWS();
                authenticate();

                // init game table
                configGameTable();

                //if a specific url was issued then navigate there.
                navigateToUrl();
            }

        })(window.fatesheet = window.fatesheet || {}, jQuery);

        $(function () {
            fatesheet.init();
        });
    </script>
</body>



</html>